import pandas as pd
import math
from sympy import *
import numpy as np
from scipy.optimize import minimize

d=np.array([]) # вставить ожидаемые доходности акций
x00=0.091;d0=-0.0756;dp=0,34577  # d0 - ожидаемая доходность облигации


def objective(x):  # функция риска
    x1 = x[0];
    x2 = x[1];
    x3 = x[2];
    x4 = x[3];
    x5 = x[4];
    x6 = x[5];
    x7 = x[6];
    x8 = x[7];
    x9 = x[8];
    x10 = x[9]  # количество x уменьшается с каждым пересмотром
    return  # вставить дисперсию доходности

def constraint1(x):
    return x[0]+x[1]+x[2]+x[3]+x[4]+x[5]+x[6]+x[7]+x[8]+x[9]-1.0+x00  # количество x уменьшается с каждым пересмотром

def constraint2(x):
    return d[0,0]*x[0] + d[1,0]*x[1] + d[2,0]*x[2] + d[3,0]*x[3] + d[4,0]*x[4]+ d[5,0]*x[5] + d[6,0]*x[6] + d[7,0]*x[7] \
           + d[8,0]*x[8]+ d[9,0]*x[9] - dp+x00*d0  # количество x уменьшается с каждым пересмотром


x0 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]  # начальное значение переменных для поиска минимума функции риска
b = (-1.0, 100.0)  # условие для  x от нуля до единицы включая пределы
bnds = (b, b, b, b, b, b,b, b, b, b)  # передача условий в функцию  риска(подготовка)
con1 = {'type': 'ineq', 'fun': constraint1}  # передача условий в функцию  риска(подготовка)
con2 = {'type': 'eq', 'fun': constraint2}  # передача условий в функцию  риска(подготовка)
cons = [con1, con2]  # передача условий в функцию  риска(подготовка)
sol = minimize(objective, x0, method='SLSQP', \
               bounds=bnds, constraints=cons)  # поиск минимума функции риска
print("Минимум функции риска : %s" % str(round(sol.fun, 3)))
print("Акция 1 доля- %s, доходность:  %s" % (round(sol.x[0], 3), round(d[0, 0] * sol.x[0], 3)))
print("Акция 2 доля- %s, доходность:  %s" % (round(sol.x[1], 3), round(d[1, 0] * sol.x[1], 3)))
print("Акция 3 доля- %s, доходность:  %s" % (round(sol.x[2], 3), round(d[2, 0] * sol.x[2], 3)))
print("Акция 4 доля- %s, доходность:  %s" % (round(sol.x[3], 3), round(d[3, 0] * sol.x[3], 3)))
print("Акция 5 доля- %s, доходность: %s" % (round(sol.x[4], 3), round(d[4, 0] * sol.x[4], 3)))
print("Акция 6 доля- %s, доходность:  %s" % (round(sol.x[5], 3), round(d[5, 0] * sol.x[5], 3)))
print("Акция 7 доля- %s, доходность: %s" % (round(sol.x[6], 3), round(d[6, 0] * sol.x[6], 3)))
print("Акция 8 доля- %s, доходность:  %s" % (round(sol.x[7], 3), round(d[7, 0] * sol.x[7], 3)))
print("Акция 9 доля- %s, доходность: %s" % (round(sol.x[8], 3), round(d[8, 0] * sol.x[8], 3)))
print("Акция 10 доля- %s, доходность: %s" % (round(sol.x[9], 3), round(d[9, 0] * sol.x[9], 3))) # количество акций уменьшается с каждым пересмотром



