import pandas as pd
import math
from sympy import *
import numpy as np
from scipy.optimize import minimize
from sympy import *

from scipy.optimize import minimize


securities = ['–†–æ—Å—Å–∏—è20', 'AAPL', 'ADBE', 'AFKS', 'AKRN', 'AMZN', 'BABA', 'CSCO', "CMC", "CFX", 'ETSY', 'FORD', 'FRHC',
              'FTCH', 'GOOGL', 'GTHX', 'JNJ', 'MOMO', 'MNST', 'MSFT', 'NOKIA', 'OSUR', 'OZON', 'PFE', 'REGI', 'SPCE',
              'SHOP', 'SBER_p', 'TSLA', "V", 'VOD', 'YNDX']  # –Ω–∞—à–∏ —Ü–µ–Ω–Ω—ã–µ –±—É–º–∞–≥–∏
print(securities)
print(len(securities))
portfolio = dict()  # –Ω–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å
securities.remove('AKRN')
securities.remove('NOKIA')
index = pd.read_csv(r'/Users/alexeychurgel/pythonProject/–¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ü–∏—è–º/–ü—Ä–æ—à–ª—ã–µ –¥–∞–Ω–Ω—ã–µ - DJIA.csv')
index['–ò–∑–º. %'] = index['–ò–∑–º. %'].apply(lambda x: float(x.replace(',', '.')[:len(x) - 1]))
index_mean = np.mean(index['–ò–∑–º. %'])  # —Å—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º
index_dispersion = np.var(index['–ò–∑–º. %'], ddof=1, axis=0)  # —Å—á–∏—Ç–∞–µ–º –¥–∏—Å–ø–µ—Ä—Å–∏—é (–Ω–µ—Å–º–µ—â–µ–Ω–Ω—É—é) –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º
path = '/Users/alexeychurgel/pythonProject/–¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ü–∏—è–º'
print(securities)
print(len(securities))
for paper in securities:
    data = pd.read_csv(f'{path}/–ü—Ä–æ—à–ª—ã–µ –¥–∞–Ω–Ω—ã–µ - {paper}.csv')
    data = data[data['–î–∞—Ç–∞'].isin(index['–î–∞—Ç–∞'])].reset_index(drop=True)# —É–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ –¥–Ω–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ index
    data['–ò–∑–º. %'] = data['–ò–∑–º. %'].apply(lambda x: float(x.replace(',', '.')[:len(x) - 1]))
    mean = np.mean(data['–ò–∑–º. %'])  # —Å—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∞ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º
    ind = index[index['–î–∞—Ç–∞'].isin(data['–î–∞—Ç–∞'])].reset_index(drop=True)
    index_cov = np.cov(ind['–ò–∑–º. %'], data['–ò–∑–º. %'])[0, 1]
    betta = index_cov / index_dispersion
    alpha = mean - betta * index_mean
    ksi_mean = np.mean(data['–ò–∑–º. %'] - alpha - betta * ind['–ò–∑–º. %'])  # 1 –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —É—Å–ª–æ–≤–∏–µ
    ksi_disp = (1 / (len(index) - 2)) * ((data['–ò–∑–º. %'] - alpha - betta * ind['–ò–∑–º. %']) ** 2).sum()  # –æ—Ü–µ–Ω–∫–∏ –¥–∏—Å–ø–µ—Ä—Å–∏–∏ # ùúìi^2 —Å–ª—É—á–∞–π–Ω–æ–π –≤–µ–ª–∏—á–∏–Ω—ã ùúâùëñt
    ksi = data['–ò–∑–º. %'] - alpha - betta * ind['–ò–∑–º. %']
    ksi_d = np.var(ksi)
    expected_profitability = round(alpha + betta * index_mean,4)
    portfolio[paper] = {'data': data['–ò–∑–º. %'], 'ind': ind, 'mean': mean, 'index_cov': index_cov,
                        'expected_profitability': expected_profitability, 'ksi': ksi, 'ksi_mean': ksi_mean,
                        'ksi_disp': ksi_disp, 'ksi_d': ksi_d, 'alpha': alpha, 'betta': betta}
print(securities)
print(len(securities))
print("–£—Å–ª–æ–≤–∏–µ 1")
print(securities)
print(len(securities))
for paper in securities:
    print(f"{paper}: {str(abs(portfolio[paper]['ksi_mean']))[:5]}")
securities = [item for item in securities if int(str(abs(portfolio[item]['ksi_mean']))[:1]) < 2]
print("–£—Å–ª–æ–≤–∏–µ 3")
print(securities)
print(len(securities))
for paper in securities:
    print(f"{paper}: {round(portfolio[paper]['ksi_d'] - portfolio[paper]['ksi_disp'],4)}")
securities = [item for item in securities if portfolio[item]['ksi_d'] - portfolio[item]['ksi_disp'] < 0.5]
print("–£—Å–ª–æ–≤–∏–µ 4")
print(securities)
print(len(securities))
for i in range(len(securities)):
    print(f"{securities[i]}: {round(abs(portfolio[securities[i]]['mean'] * index_mean),4)}")
print("–£—Å–ª–æ–≤–∏–µ 2")
print(securities)
print(len(securities))
for i in range(len(securities)):
    j = 0
    for pap in dict([(key, value) for key, value in portfolio.items() if key in securities[i + 1:]]): # $#119894; ‚â† j
        j += 1
        summ = 0
        var1 = 0
        for k in portfolio[securities[i]]['ksi']:
            var2 = 0
            for kk in portfolio[pap]['ksi']:
                if var1 != var2: # $#119905; ‚â† t
                    summ += k * kk
                var2 +=1
            var1+=1
        print(f"{securities[i]} & {securities[i + j]}: {round(summ / ((len(portfolio[securities[i]]['ksi']) - 1) * (len(portfolio[pap]['ksi']) - 1) - 2),4)}")
expected_prof_matrix = np.array([])
print(securities)
print(len(securities))
print('O–∂–∏–¥–∞–µ–º—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–æ–≤:')
for i in range(len(securities)):
    exp_p = portfolio[securities[i]]['expected_profitability']
    print(f"{securities[i]}: {exp_p}")
expected_prof_matrix = np.hstack((expected_prof_matrix, exp_p))
expected_prof_matrix = expected_prof_matrix.reshape(-1, 1)
print('–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π –∞–∫—Ç–∏–≤–æ–≤:')
cov_matrix = np.array([])
print(securities)
print(len(securities))
for paper1 in securities:
    if paper1 != "–†–æ—Å—Å–∏—è20":
        b1 = portfolio[paper1]['betta']
        for paper2 in securities:
            if paper2 != "–†–æ—Å—Å–∏—è20":
                b2 = portfolio[paper2]['betta']
                cov_matrix = np.hstack((cov_matrix, round(b1 * b2 * index_dispersion,2)))
cov_matrix = cov_matrix.reshape(len(securities) -1, -1)
print(cov_matrix)
print(cov_matrix.shape)

x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,p,q,w=symbols(' x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 p q w' , float= True)
v1=Matrix([x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11])
v2=v1.T
w=0
for i in np.arange(0,10):
         for j in np.arange(0,10):
             w=w+v1[p.subs({p:i}),q.subs({q:0})]*v2[p.subs({p:0}),q.subs({q:j})]*cov_matrix[p.subs({p:i}),q.subs({q:j})]
print("–î–∏—Å–ø–µ—Ä—Å–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è (—Ñ—É–Ω–∫—Ü–∏—è —Ä–∏—Å–∫–∞):\n%s"%w)


